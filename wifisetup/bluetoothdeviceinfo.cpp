/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                                                                         *
 *  Copyright (C) 2018 Simon Stuerz <simon.stuerz@guh.io>                  *
 *                                                                         *
 *  This file is part of nymea:app                                         *
 *                                                                         *
 *  This library is free software; you can redistribute it and/or          *
 *  modify it under the terms of the GNU Lesser General Public             *
 *  License as published by the Free Software Foundation; either           *
 *  version 2.1 of the License, or (at your option) any later version.     *
 *                                                                         *
 *  This library is distributed in the hope that it will be useful,        *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of         *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU      *
 *  Lesser General Public License for more details.                        *
 *                                                                         *
 *  You should have received a copy of the GNU Lesser General Public       *
 *  License along with this library; If not, see                           *
 *  <http://www.gnu.org/licenses/>.                                        *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#include "bluetoothdeviceinfo.h"

#include <QBluetoothUuid>

#include <QDebug>


BluetoothDeviceInfo::BluetoothDeviceInfo(const QBluetoothDeviceInfo &deviceInfo)
{
    m_deviceInfo = deviceInfo;
    selected_ = false;
    //ipAddress_ = "";
}

QString BluetoothDeviceInfo::address() const
{
#ifdef Q_OS_MAC
    // On OS X and iOS we do not have addresses,
    // only unique UUIDs generated by Core Bluetooth.
    return m_deviceInfo.deviceUuid().toString();
#else
    return m_deviceInfo.address().toString();
#endif
}

QString BluetoothDeviceInfo::name() const
{
    return m_deviceInfo.name();
}

bool BluetoothDeviceInfo::isLowEnergy() const
{
    return m_deviceInfo.coreConfigurations() & QBluetoothDeviceInfo::LowEnergyCoreConfiguration;
}

bool BluetoothDeviceInfo::selected()
{
    return selected_;
}

void BluetoothDeviceInfo::setSelected(bool selected)
{
    selected_ = selected;

    emit selectedChanged();
}

QString BluetoothDeviceInfo::ipAddress()
{
    qDebug() << "ipAddresses(): " << ipAddress_;
    return ipAddress_;
}

QString BluetoothDeviceInfo::setIpAddress(QString ipAddress)
{
    qDebug() << "setIpAddress1: " << ipAddress;
    ipAddress_ = ipAddress;
    qDebug() << "setIpAddress: " << ipAddress_;
    emit ipAddressChanged();
    emit deviceChanged();
    return ipAddress_;
}

bool BluetoothDeviceInfo::connectedNetwork()
{
    qDebug() << "Het IP Address is: " << ipAddress_;
    QRegExp rx("(\\.)"); //RegEx for '.'
    QStringList query = ipAddress_.split(rx);
    if (query.length() == 4){
        int counterArray = 0;
        while(counterArray < 4){
            if (query[counterArray] > 0 && query[counterArray] < 255){
                connect = true;
            }
            else{
                connect = false;
                qDebug() << "Device is not connected to the network!";
                return connect;
            }
            counterArray++;
        }
    }
    else{
        connect = false;
    }
    qDebug() << "Device connecting to network: " << connect;
    return connect;
}

QBluetoothDeviceInfo BluetoothDeviceInfo::getBluetoothDeviceInfo() const
{
    return m_deviceInfo;
}

void BluetoothDeviceInfo::setBluetoothDeviceInfo(const QBluetoothDeviceInfo &deviceInfo)
{
    m_deviceInfo = QBluetoothDeviceInfo(deviceInfo);
    emit deviceChanged();
}
